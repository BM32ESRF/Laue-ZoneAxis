DATE: Thu Jul 29 09:07:42 2021
NCPU: 2
============ TEST GEOMETRY DTYPE =============
cam_to_gnomonic:
	boucle 0: float16->float16
	boucle 1: float16->float16
	boucle 2: float16->float16
	boucle 0: float32->float32
	boucle 1: float32->float32
	boucle 2: float32->float32
	boucle 0: float64->float64
	boucle 1: float64->float64
	boucle 2: float64->float64
	boucle 0: float128->float128
	boucle 1: float128->float128
	boucle 2: float128->float128
gnomonic_to_cam:
	boucle 0: float16->float16
	boucle 1: float16->float16
	boucle 2: float16->float16
	boucle 0: float32->float32
	boucle 1: float32->float32
	boucle 2: float32->float32
	boucle 0: float64->float64
	boucle 1: float64->float64
	boucle 2: float64->float64
	boucle 0: float128->float128
	boucle 1: float128->float128
	boucle 2: float128->float128
dist_line:
	float16->float16
	float32->float32
	float64->float64
	float128->float128
hough:
	float16->float16
	float32->float32
	float64->float64
	float128->float128
hough_reduce:
	float16->float16
	float32->float32
	float64->float64
inter_lines:
	float16->float16
	float32->float32
	float64->float64
	float128->float128
============ TEST GEOMETRY SHAPE =============
shape: (6, 7, 9, 6)
boucle 0, <bound method Transformer.cam_to_gnomonic of <laue.geometry.Transformer object at 0x7f1e308cdcd0>>(...).shape -> (2, 6, 7, 9, 6)
boucle 0, <bound method Transformer.gnomonic_to_cam of <laue.geometry.Transformer object at 0x7f1e308cdcd0>>(...).shape -> (2, 6, 7, 9, 6)
boucle 1, <bound method Transformer.cam_to_gnomonic of <laue.geometry.Transformer object at 0x7f1e308cdcd0>>(...).shape -> (2, 6, 7, 9, 6)
boucle 1, <bound method Transformer.gnomonic_to_cam of <laue.geometry.Transformer object at 0x7f1e308cdcd0>>(...).shape -> (2, 6, 7, 9, 6)
boucle 2, <bound method Transformer.cam_to_gnomonic of <laue.geometry.Transformer object at 0x7f1e308cdcd0>>(...).shape -> (2, 6, 7, 9, 6)
boucle 2, <bound method Transformer.gnomonic_to_cam of <laue.geometry.Transformer object at 0x7f1e308cdcd0>>(...).shape -> (2, 6, 7, 9, 6)
dist_line(...).shape -> (6, 7, 9, 6, 6, 7, 9, 6)
hough(...).shape -> (2, 6, 7, 9, 15)
inter_lines(...).shape -> (2, 6, 7, 9, 15)
=============== TEST BIJECTION ===============
cam_to_gnom(xc, yc): [(sqrt(2)*dd*sin(beta + pi/4) - sqrt(2)*pixelsize*x_c*sin(gamma)*cos(beta + pi/4) + sqrt(2)*pixelsize*xcen*sin(gamma)*cos(beta + pi/4) + sqrt(2)*pixelsize*y_c*cos(gamma)*cos(beta + pi/4) - sqrt(2)*pixelsize*ycen*cos(gamma)*cos(beta + pi/4) - sqrt(dd**2 + pixelsize**2*x_c**2 - 2*pixelsize**2*x_c*xcen + pixelsize**2*xcen**2 + pixelsize**2*y_c**2 - 2*pixelsize**2*y_c*ycen + pixelsize**2*ycen**2))/(sqrt(2)*dd*cos(beta + pi/4) + sqrt(2)*pixelsize*x_c*sin(gamma)*sin(beta + pi/4) - sqrt(2)*pixelsize*xcen*sin(gamma)*sin(beta + pi/4) - sqrt(2)*pixelsize*y_c*sin(beta + pi/4)*cos(gamma) + sqrt(2)*pixelsize*ycen*sin(beta + pi/4)*cos(gamma) + sqrt(dd**2 + pixelsize**2*x_c**2 - 2*pixelsize**2*x_c*xcen + pixelsize**2*xcen**2 + pixelsize**2*y_c**2 - 2*pixelsize**2*y_c*ycen + pixelsize**2*ycen**2)), sqrt(2)*pixelsize*(-x_c*cos(gamma) + xcen*cos(gamma) - y_c*sin(gamma) + ycen*sin(gamma))/(sqrt(2)*dd*cos(beta + pi/4) + sqrt(2)*pixelsize*x_c*sin(gamma)*sin(beta + pi/4) - sqrt(2)*pixelsize*xcen*sin(gamma)*sin(beta + pi/4) - sqrt(2)*pixelsize*y_c*sin(beta + pi/4)*cos(gamma) + sqrt(2)*pixelsize*ycen*sin(beta + pi/4)*cos(gamma) + sqrt(dd**2 + pixelsize**2*x_c**2 - 2*pixelsize**2*x_c*xcen + pixelsize**2*xcen**2 + pixelsize**2*y_c**2 - 2*pixelsize**2*y_c*ycen + pixelsize**2*ycen**2))]
gnom_to_cam(xg, yg): [(dd*x_g**2*sin(beta)*sin(gamma) - sqrt(2)*dd*x_g*y_g*cos(gamma) + 2*dd*x_g*sin(gamma)*cos(beta) + dd*y_g**2*sin(gamma)*cos(beta) + sqrt(2)*dd*y_g*cos(gamma) - dd*sin(beta)*sin(gamma) + pixelsize*x_g**2*xcen*cos(beta) - 2*pixelsize*x_g*xcen*sin(beta) - pixelsize*xcen*y_g**2*sin(beta) - pixelsize*xcen*cos(beta))/(pixelsize*(x_g**2*cos(beta) - 2*x_g*sin(beta) - y_g**2*sin(beta) - cos(beta))), (-dd*x_g**2*sin(beta)*cos(gamma) - sqrt(2)*dd*x_g*y_g*sin(gamma) - 2*dd*x_g*cos(beta)*cos(gamma) - dd*y_g**2*cos(beta)*cos(gamma) + sqrt(2)*dd*y_g*sin(gamma) + dd*sin(beta)*cos(gamma) + pixelsize*x_g**2*ycen*cos(beta) - 2*pixelsize*x_g*ycen*sin(beta) - pixelsize*y_g**2*ycen*sin(beta) - pixelsize*ycen*cos(beta))/(pixelsize*(x_g**2*cos(beta) - 2*x_g*sin(beta) - y_g**2*sin(beta) - cos(beta)))]
(cam_to_gnom o gnom_to_cam)(xg, yg): [(sqrt(2)*dd*sin(beta + pi/4) + sqrt(2)*pixelsize*xcen*sin(gamma)*cos(beta + pi/4) - sqrt(2)*pixelsize*ycen*cos(gamma)*cos(beta + pi/4) - sqrt(dd**2 + pixelsize**2*xcen**2 + pixelsize**2*ycen**2 - 2*pixelsize*xcen*(dd*x_g**2*sin(beta)*sin(gamma) - sqrt(2)*dd*x_g*y_g*cos(gamma) + 2*dd*x_g*sin(gamma)*cos(beta) + dd*y_g**2*sin(gamma)*cos(beta) + sqrt(2)*dd*y_g*cos(gamma) - dd*sin(beta)*sin(gamma) + pixelsize*x_g**2*xcen*cos(beta) - 2*pixelsize*x_g*xcen*sin(beta) - pixelsize*xcen*y_g**2*sin(beta) - pixelsize*xcen*cos(beta))/(x_g**2*cos(beta) - 2*x_g*sin(beta) - y_g**2*sin(beta) - cos(beta)) - 2*pixelsize*ycen*(-dd*x_g**2*sin(beta)*cos(gamma) - sqrt(2)*dd*x_g*y_g*sin(gamma) - 2*dd*x_g*cos(beta)*cos(gamma) - dd*y_g**2*cos(beta)*cos(gamma) + sqrt(2)*dd*y_g*sin(gamma) + dd*sin(beta)*cos(gamma) + pixelsize*x_g**2*ycen*cos(beta) - 2*pixelsize*x_g*ycen*sin(beta) - pixelsize*y_g**2*ycen*sin(beta) - pixelsize*ycen*cos(beta))/(x_g**2*cos(beta) - 2*x_g*sin(beta) - y_g**2*sin(beta) - cos(beta)) + (dd*x_g**2*sin(beta)*sin(gamma) - sqrt(2)*dd*x_g*y_g*cos(gamma) + 2*dd*x_g*sin(gamma)*cos(beta) + dd*y_g**2*sin(gamma)*cos(beta) + sqrt(2)*dd*y_g*cos(gamma) - dd*sin(beta)*sin(gamma) + pixelsize*x_g**2*xcen*cos(beta) - 2*pixelsize*x_g*xcen*sin(beta) - pixelsize*xcen*y_g**2*sin(beta) - pixelsize*xcen*cos(beta))**2/(x_g**2*cos(beta) - 2*x_g*sin(beta) - y_g**2*sin(beta) - cos(beta))**2 + (-dd*x_g**2*sin(beta)*cos(gamma) - sqrt(2)*dd*x_g*y_g*sin(gamma) - 2*dd*x_g*cos(beta)*cos(gamma) - dd*y_g**2*cos(beta)*cos(gamma) + sqrt(2)*dd*y_g*sin(gamma) + dd*sin(beta)*cos(gamma) + pixelsize*x_g**2*ycen*cos(beta) - 2*pixelsize*x_g*ycen*sin(beta) - pixelsize*y_g**2*ycen*sin(beta) - pixelsize*ycen*cos(beta))**2/(x_g**2*cos(beta) - 2*x_g*sin(beta) - y_g**2*sin(beta) - cos(beta))**2) - sqrt(2)*(dd*x_g**2*sin(beta)*sin(gamma) - sqrt(2)*dd*x_g*y_g*cos(gamma) + 2*dd*x_g*sin(gamma)*cos(beta) + dd*y_g**2*sin(gamma)*cos(beta) + sqrt(2)*dd*y_g*cos(gamma) - dd*sin(beta)*sin(gamma) + pixelsize*x_g**2*xcen*cos(beta) - 2*pixelsize*x_g*xcen*sin(beta) - pixelsize*xcen*y_g**2*sin(beta) - pixelsize*xcen*cos(beta))*sin(gamma)*cos(beta + pi/4)/(x_g**2*cos(beta) - 2*x_g*sin(beta) - y_g**2*sin(beta) - cos(beta)) + sqrt(2)*(-dd*x_g**2*sin(beta)*cos(gamma) - sqrt(2)*dd*x_g*y_g*sin(gamma) - 2*dd*x_g*cos(beta)*cos(gamma) - dd*y_g**2*cos(beta)*cos(gamma) + sqrt(2)*dd*y_g*sin(gamma) + dd*sin(beta)*cos(gamma) + pixelsize*x_g**2*ycen*cos(beta) - 2*pixelsize*x_g*ycen*sin(beta) - pixelsize*y_g**2*ycen*sin(beta) - pixelsize*ycen*cos(beta))*cos(gamma)*cos(beta + pi/4)/(x_g**2*cos(beta) - 2*x_g*sin(beta) - y_g**2*sin(beta) - cos(beta)))/(sqrt(2)*dd*cos(beta + pi/4) - sqrt(2)*pixelsize*xcen*sin(gamma)*sin(beta + pi/4) + sqrt(2)*pixelsize*ycen*sin(beta + pi/4)*cos(gamma) + sqrt(dd**2 + pixelsize**2*xcen**2 + pixelsize**2*ycen**2 - 2*pixelsize*xcen*(dd*x_g**2*sin(beta)*sin(gamma) - sqrt(2)*dd*x_g*y_g*cos(gamma) + 2*dd*x_g*sin(gamma)*cos(beta) + dd*y_g**2*sin(gamma)*cos(beta) + sqrt(2)*dd*y_g*cos(gamma) - dd*sin(beta)*sin(gamma) + pixelsize*x_g**2*xcen*cos(beta) - 2*pixelsize*x_g*xcen*sin(beta) - pixelsize*xcen*y_g**2*sin(beta) - pixelsize*xcen*cos(beta))/(x_g**2*cos(beta) - 2*x_g*sin(beta) - y_g**2*sin(beta) - cos(beta)) - 2*pixelsize*ycen*(-dd*x_g**2*sin(beta)*cos(gamma) - sqrt(2)*dd*x_g*y_g*sin(gamma) - 2*dd*x_g*cos(beta)*cos(gamma) - dd*y_g**2*cos(beta)*cos(gamma) + sqrt(2)*dd*y_g*sin(gamma) + dd*sin(beta)*cos(gamma) + pixelsize*x_g**2*ycen*cos(beta) - 2*pixelsize*x_g*ycen*sin(beta) - pixelsize*y_g**2*ycen*sin(beta) - pixelsize*ycen*cos(beta))/(x_g**2*cos(beta) - 2*x_g*sin(beta) - y_g**2*sin(beta) - cos(beta)) + (dd*x_g**2*sin(beta)*sin(gamma) - sqrt(2)*dd*x_g*y_g*cos(gamma) + 2*dd*x_g*sin(gamma)*cos(beta) + dd*y_g**2*sin(gamma)*cos(beta) + sqrt(2)*dd*y_g*cos(gamma) - dd*sin(beta)*sin(gamma) + pixelsize*x_g**2*xcen*cos(beta) - 2*pixelsize*x_g*xcen*sin(beta) - pixelsize*xcen*y_g**2*sin(beta) - pixelsize*xcen*cos(beta))**2/(x_g**2*cos(beta) - 2*x_g*sin(beta) - y_g**2*sin(beta) - cos(beta))**2 + (-dd*x_g**2*sin(beta)*cos(gamma) - sqrt(2)*dd*x_g*y_g*sin(gamma) - 2*dd*x_g*cos(beta)*cos(gamma) - dd*y_g**2*cos(beta)*cos(gamma) + sqrt(2)*dd*y_g*sin(gamma) + dd*sin(beta)*cos(gamma) + pixelsize*x_g**2*ycen*cos(beta) - 2*pixelsize*x_g*ycen*sin(beta) - pixelsize*y_g**2*ycen*sin(beta) - pixelsize*ycen*cos(beta))**2/(x_g**2*cos(beta) - 2*x_g*sin(beta) - y_g**2*sin(beta) - cos(beta))**2) + sqrt(2)*(dd*x_g**2*sin(beta)*sin(gamma) - sqrt(2)*dd*x_g*y_g*cos(gamma) + 2*dd*x_g*sin(gamma)*cos(beta) + dd*y_g**2*sin(gamma)*cos(beta) + sqrt(2)*dd*y_g*cos(gamma) - dd*sin(beta)*sin(gamma) + pixelsize*x_g**2*xcen*cos(beta) - 2*pixelsize*x_g*xcen*sin(beta) - pixelsize*xcen*y_g**2*sin(beta) - pixelsize*xcen*cos(beta))*sin(gamma)*sin(beta + pi/4)/(x_g**2*cos(beta) - 2*x_g*sin(beta) - y_g**2*sin(beta) - cos(beta)) - sqrt(2)*(-dd*x_g**2*sin(beta)*cos(gamma) - sqrt(2)*dd*x_g*y_g*sin(gamma) - 2*dd*x_g*cos(beta)*cos(gamma) - dd*y_g**2*cos(beta)*cos(gamma) + sqrt(2)*dd*y_g*sin(gamma) + dd*sin(beta)*cos(gamma) + pixelsize*x_g**2*ycen*cos(beta) - 2*pixelsize*x_g*ycen*sin(beta) - pixelsize*y_g**2*ycen*sin(beta) - pixelsize*ycen*cos(beta))*sin(beta + pi/4)*cos(gamma)/(x_g**2*cos(beta) - 2*x_g*sin(beta) - y_g**2*sin(beta) - cos(beta))), sqrt(2)*pixelsize*(xcen*cos(gamma) + ycen*sin(gamma) - (dd*x_g**2*sin(beta)*sin(gamma) - sqrt(2)*dd*x_g*y_g*cos(gamma) + 2*dd*x_g*sin(gamma)*cos(beta) + dd*y_g**2*sin(gamma)*cos(beta) + sqrt(2)*dd*y_g*cos(gamma) - dd*sin(beta)*sin(gamma) + pixelsize*x_g**2*xcen*cos(beta) - 2*pixelsize*x_g*xcen*sin(beta) - pixelsize*xcen*y_g**2*sin(beta) - pixelsize*xcen*cos(beta))*cos(gamma)/(pixelsize*(x_g**2*cos(beta) - 2*x_g*sin(beta) - y_g**2*sin(beta) - cos(beta))) - (-dd*x_g**2*sin(beta)*cos(gamma) - sqrt(2)*dd*x_g*y_g*sin(gamma) - 2*dd*x_g*cos(beta)*cos(gamma) - dd*y_g**2*cos(beta)*cos(gamma) + sqrt(2)*dd*y_g*sin(gamma) + dd*sin(beta)*cos(gamma) + pixelsize*x_g**2*ycen*cos(beta) - 2*pixelsize*x_g*ycen*sin(beta) - pixelsize*y_g**2*ycen*sin(beta) - pixelsize*ycen*cos(beta))*sin(gamma)/(pixelsize*(x_g**2*cos(beta) - 2*x_g*sin(beta) - y_g**2*sin(beta) - cos(beta))))/(sqrt(2)*dd*cos(beta + pi/4) - sqrt(2)*pixelsize*xcen*sin(gamma)*sin(beta + pi/4) + sqrt(2)*pixelsize*ycen*sin(beta + pi/4)*cos(gamma) + sqrt(dd**2 + pixelsize**2*xcen**2 + pixelsize**2*ycen**2 - 2*pixelsize*xcen*(dd*x_g**2*sin(beta)*sin(gamma) - sqrt(2)*dd*x_g*y_g*cos(gamma) + 2*dd*x_g*sin(gamma)*cos(beta) + dd*y_g**2*sin(gamma)*cos(beta) + sqrt(2)*dd*y_g*cos(gamma) - dd*sin(beta)*sin(gamma) + pixelsize*x_g**2*xcen*cos(beta) - 2*pixelsize*x_g*xcen*sin(beta) - pixelsize*xcen*y_g**2*sin(beta) - pixelsize*xcen*cos(beta))/(x_g**2*cos(beta) - 2*x_g*sin(beta) - y_g**2*sin(beta) - cos(beta)) - 2*pixelsize*ycen*(-dd*x_g**2*sin(beta)*cos(gamma) - sqrt(2)*dd*x_g*y_g*sin(gamma) - 2*dd*x_g*cos(beta)*cos(gamma) - dd*y_g**2*cos(beta)*cos(gamma) + sqrt(2)*dd*y_g*sin(gamma) + dd*sin(beta)*cos(gamma) + pixelsize*x_g**2*ycen*cos(beta) - 2*pixelsize*x_g*ycen*sin(beta) - pixelsize*y_g**2*ycen*sin(beta) - pixelsize*ycen*cos(beta))/(x_g**2*cos(beta) - 2*x_g*sin(beta) - y_g**2*sin(beta) - cos(beta)) + (dd*x_g**2*sin(beta)*sin(gamma) - sqrt(2)*dd*x_g*y_g*cos(gamma) + 2*dd*x_g*sin(gamma)*cos(beta) + dd*y_g**2*sin(gamma)*cos(beta) + sqrt(2)*dd*y_g*cos(gamma) - dd*sin(beta)*sin(gamma) + pixelsize*x_g**2*xcen*cos(beta) - 2*pixelsize*x_g*xcen*sin(beta) - pixelsize*xcen*y_g**2*sin(beta) - pixelsize*xcen*cos(beta))**2/(x_g**2*cos(beta) - 2*x_g*sin(beta) - y_g**2*sin(beta) - cos(beta))**2 + (-dd*x_g**2*sin(beta)*cos(gamma) - sqrt(2)*dd*x_g*y_g*sin(gamma) - 2*dd*x_g*cos(beta)*cos(gamma) - dd*y_g**2*cos(beta)*cos(gamma) + sqrt(2)*dd*y_g*sin(gamma) + dd*sin(beta)*cos(gamma) + pixelsize*x_g**2*ycen*cos(beta) - 2*pixelsize*x_g*ycen*sin(beta) - pixelsize*y_g**2*ycen*sin(beta) - pixelsize*ycen*cos(beta))**2/(x_g**2*cos(beta) - 2*x_g*sin(beta) - y_g**2*sin(beta) - cos(beta))**2) + sqrt(2)*(dd*x_g**2*sin(beta)*sin(gamma) - sqrt(2)*dd*x_g*y_g*cos(gamma) + 2*dd*x_g*sin(gamma)*cos(beta) + dd*y_g**2*sin(gamma)*cos(beta) + sqrt(2)*dd*y_g*cos(gamma) - dd*sin(beta)*sin(gamma) + pixelsize*x_g**2*xcen*cos(beta) - 2*pixelsize*x_g*xcen*sin(beta) - pixelsize*xcen*y_g**2*sin(beta) - pixelsize*xcen*cos(beta))*sin(gamma)*sin(beta + pi/4)/(x_g**2*cos(beta) - 2*x_g*sin(beta) - y_g**2*sin(beta) - cos(beta)) - sqrt(2)*(-dd*x_g**2*sin(beta)*cos(gamma) - sqrt(2)*dd*x_g*y_g*sin(gamma) - 2*dd*x_g*cos(beta)*cos(gamma) - dd*y_g**2*cos(beta)*cos(gamma) + sqrt(2)*dd*y_g*sin(gamma) + dd*sin(beta)*cos(gamma) + pixelsize*x_g**2*ycen*cos(beta) - 2*pixelsize*x_g*ycen*sin(beta) - pixelsize*y_g**2*ycen*sin(beta) - pixelsize*ycen*cos(beta))*sin(beta + pi/4)*cos(gamma)/(x_g**2*cos(beta) - 2*x_g*sin(beta) - y_g**2*sin(beta) - cos(beta)))]
(gnom_to_cam o cam_to_gnom)(xc, yc): [(2*dd*pixelsize**2*(-x_c*cos(gamma) + xcen*cos(gamma) - y_c*sin(gamma) + ycen*sin(gamma))**2*sin(gamma)*cos(beta)/(sqrt(2)*dd*cos(beta + pi/4) + sqrt(2)*pixelsize*x_c*sin(gamma)*sin(beta + pi/4) - sqrt(2)*pixelsize*xcen*sin(gamma)*sin(beta + pi/4) - sqrt(2)*pixelsize*y_c*sin(beta + pi/4)*cos(gamma) + sqrt(2)*pixelsize*ycen*sin(beta + pi/4)*cos(gamma) + sqrt(dd**2 + pixelsize**2*x_c**2 - 2*pixelsize**2*x_c*xcen + pixelsize**2*xcen**2 + pixelsize**2*y_c**2 - 2*pixelsize**2*y_c*ycen + pixelsize**2*ycen**2))**2 - 2*dd*pixelsize*(-x_c*cos(gamma) + xcen*cos(gamma) - y_c*sin(gamma) + ycen*sin(gamma))*(sqrt(2)*dd*sin(beta + pi/4) - sqrt(2)*pixelsize*x_c*sin(gamma)*cos(beta + pi/4) + sqrt(2)*pixelsize*xcen*sin(gamma)*cos(beta + pi/4) + sqrt(2)*pixelsize*y_c*cos(gamma)*cos(beta + pi/4) - sqrt(2)*pixelsize*ycen*cos(gamma)*cos(beta + pi/4) - sqrt(dd**2 + pixelsize**2*x_c**2 - 2*pixelsize**2*x_c*xcen + pixelsize**2*xcen**2 + pixelsize**2*y_c**2 - 2*pixelsize**2*y_c*ycen + pixelsize**2*ycen**2))*cos(gamma)/(sqrt(2)*dd*cos(beta + pi/4) + sqrt(2)*pixelsize*x_c*sin(gamma)*sin(beta + pi/4) - sqrt(2)*pixelsize*xcen*sin(gamma)*sin(beta + pi/4) - sqrt(2)*pixelsize*y_c*sin(beta + pi/4)*cos(gamma) + sqrt(2)*pixelsize*ycen*sin(beta + pi/4)*cos(gamma) + sqrt(dd**2 + pixelsize**2*x_c**2 - 2*pixelsize**2*x_c*xcen + pixelsize**2*xcen**2 + pixelsize**2*y_c**2 - 2*pixelsize**2*y_c*ycen + pixelsize**2*ycen**2))**2 + 2*dd*pixelsize*(-x_c*cos(gamma) + xcen*cos(gamma) - y_c*sin(gamma) + ycen*sin(gamma))*cos(gamma)/(sqrt(2)*dd*cos(beta + pi/4) + sqrt(2)*pixelsize*x_c*sin(gamma)*sin(beta + pi/4) - sqrt(2)*pixelsize*xcen*sin(gamma)*sin(beta + pi/4) - sqrt(2)*pixelsize*y_c*sin(beta + pi/4)*cos(gamma) + sqrt(2)*pixelsize*ycen*sin(beta + pi/4)*cos(gamma) + sqrt(dd**2 + pixelsize**2*x_c**2 - 2*pixelsize**2*x_c*xcen + pixelsize**2*xcen**2 + pixelsize**2*y_c**2 - 2*pixelsize**2*y_c*ycen + pixelsize**2*ycen**2)) + dd*(sqrt(2)*dd*sin(beta + pi/4) - sqrt(2)*pixelsize*x_c*sin(gamma)*cos(beta + pi/4) + sqrt(2)*pixelsize*xcen*sin(gamma)*cos(beta + pi/4) + sqrt(2)*pixelsize*y_c*cos(gamma)*cos(beta + pi/4) - sqrt(2)*pixelsize*ycen*cos(gamma)*cos(beta + pi/4) - sqrt(dd**2 + pixelsize**2*x_c**2 - 2*pixelsize**2*x_c*xcen + pixelsize**2*xcen**2 + pixelsize**2*y_c**2 - 2*pixelsize**2*y_c*ycen + pixelsize**2*ycen**2))**2*sin(beta)*sin(gamma)/(sqrt(2)*dd*cos(beta + pi/4) + sqrt(2)*pixelsize*x_c*sin(gamma)*sin(beta + pi/4) - sqrt(2)*pixelsize*xcen*sin(gamma)*sin(beta + pi/4) - sqrt(2)*pixelsize*y_c*sin(beta + pi/4)*cos(gamma) + sqrt(2)*pixelsize*ycen*sin(beta + pi/4)*cos(gamma) + sqrt(dd**2 + pixelsize**2*x_c**2 - 2*pixelsize**2*x_c*xcen + pixelsize**2*xcen**2 + pixelsize**2*y_c**2 - 2*pixelsize**2*y_c*ycen + pixelsize**2*ycen**2))**2 + 2*dd*(sqrt(2)*dd*sin(beta + pi/4) - sqrt(2)*pixelsize*x_c*sin(gamma)*cos(beta + pi/4) + sqrt(2)*pixelsize*xcen*sin(gamma)*cos(beta + pi/4) + sqrt(2)*pixelsize*y_c*cos(gamma)*cos(beta + pi/4) - sqrt(2)*pixelsize*ycen*cos(gamma)*cos(beta + pi/4) - sqrt(dd**2 + pixelsize**2*x_c**2 - 2*pixelsize**2*x_c*xcen + pixelsize**2*xcen**2 + pixelsize**2*y_c**2 - 2*pixelsize**2*y_c*ycen + pixelsize**2*ycen**2))*sin(gamma)*cos(beta)/(sqrt(2)*dd*cos(beta + pi/4) + sqrt(2)*pixelsize*x_c*sin(gamma)*sin(beta + pi/4) - sqrt(2)*pixelsize*xcen*sin(gamma)*sin(beta + pi/4) - sqrt(2)*pixelsize*y_c*sin(beta + pi/4)*cos(gamma) + sqrt(2)*pixelsize*ycen*sin(beta + pi/4)*cos(gamma) + sqrt(dd**2 + pixelsize**2*x_c**2 - 2*pixelsize**2*x_c*xcen + pixelsize**2*xcen**2 + pixelsize**2*y_c**2 - 2*pixelsize**2*y_c*ycen + pixelsize**2*ycen**2)) - dd*sin(beta)*sin(gamma) - 2*pixelsize**3*xcen*(-x_c*cos(gamma) + xcen*cos(gamma) - y_c*sin(gamma) + ycen*sin(gamma))**2*sin(beta)/(sqrt(2)*dd*cos(beta + pi/4) + sqrt(2)*pixelsize*x_c*sin(gamma)*sin(beta + pi/4) - sqrt(2)*pixelsize*xcen*sin(gamma)*sin(beta + pi/4) - sqrt(2)*pixelsize*y_c*sin(beta + pi/4)*cos(gamma) + sqrt(2)*pixelsize*ycen*sin(beta + pi/4)*cos(gamma) + sqrt(dd**2 + pixelsize**2*x_c**2 - 2*pixelsize**2*x_c*xcen + pixelsize**2*xcen**2 + pixelsize**2*y_c**2 - 2*pixelsize**2*y_c*ycen + pixelsize**2*ycen**2))**2 + pixelsize*xcen*(sqrt(2)*dd*sin(beta + pi/4) - sqrt(2)*pixelsize*x_c*sin(gamma)*cos(beta + pi/4) + sqrt(2)*pixelsize*xcen*sin(gamma)*cos(beta + pi/4) + sqrt(2)*pixelsize*y_c*cos(gamma)*cos(beta + pi/4) - sqrt(2)*pixelsize*ycen*cos(gamma)*cos(beta + pi/4) - sqrt(dd**2 + pixelsize**2*x_c**2 - 2*pixelsize**2*x_c*xcen + pixelsize**2*xcen**2 + pixelsize**2*y_c**2 - 2*pixelsize**2*y_c*ycen + pixelsize**2*ycen**2))**2*cos(beta)/(sqrt(2)*dd*cos(beta + pi/4) + sqrt(2)*pixelsize*x_c*sin(gamma)*sin(beta + pi/4) - sqrt(2)*pixelsize*xcen*sin(gamma)*sin(beta + pi/4) - sqrt(2)*pixelsize*y_c*sin(beta + pi/4)*cos(gamma) + sqrt(2)*pixelsize*ycen*sin(beta + pi/4)*cos(gamma) + sqrt(dd**2 + pixelsize**2*x_c**2 - 2*pixelsize**2*x_c*xcen + pixelsize**2*xcen**2 + pixelsize**2*y_c**2 - 2*pixelsize**2*y_c*ycen + pixelsize**2*ycen**2))**2 - 2*pixelsize*xcen*(sqrt(2)*dd*sin(beta + pi/4) - sqrt(2)*pixelsize*x_c*sin(gamma)*cos(beta + pi/4) + sqrt(2)*pixelsize*xcen*sin(gamma)*cos(beta + pi/4) + sqrt(2)*pixelsize*y_c*cos(gamma)*cos(beta + pi/4) - sqrt(2)*pixelsize*ycen*cos(gamma)*cos(beta + pi/4) - sqrt(dd**2 + pixelsize**2*x_c**2 - 2*pixelsize**2*x_c*xcen + pixelsize**2*xcen**2 + pixelsize**2*y_c**2 - 2*pixelsize**2*y_c*ycen + pixelsize**2*ycen**2))*sin(beta)/(sqrt(2)*dd*cos(beta + pi/4) + sqrt(2)*pixelsize*x_c*sin(gamma)*sin(beta + pi/4) - sqrt(2)*pixelsize*xcen*sin(gamma)*sin(beta + pi/4) - sqrt(2)*pixelsize*y_c*sin(beta + pi/4)*cos(gamma) + sqrt(2)*pixelsize*ycen*sin(beta + pi/4)*cos(gamma) + sqrt(dd**2 + pixelsize**2*x_c**2 - 2*pixelsize**2*x_c*xcen + pixelsize**2*xcen**2 + pixelsize**2*y_c**2 - 2*pixelsize**2*y_c*ycen + pixelsize**2*ycen**2)) - pixelsize*xcen*cos(beta))/(pixelsize*(-2*pixelsize**2*(-x_c*cos(gamma) + xcen*cos(gamma) - y_c*sin(gamma) + ycen*sin(gamma))**2*sin(beta)/(sqrt(2)*dd*cos(beta + pi/4) + sqrt(2)*pixelsize*x_c*sin(gamma)*sin(beta + pi/4) - sqrt(2)*pixelsize*xcen*sin(gamma)*sin(beta + pi/4) - sqrt(2)*pixelsize*y_c*sin(beta + pi/4)*cos(gamma) + sqrt(2)*pixelsize*ycen*sin(beta + pi/4)*cos(gamma) + sqrt(dd**2 + pixelsize**2*x_c**2 - 2*pixelsize**2*x_c*xcen + pixelsize**2*xcen**2 + pixelsize**2*y_c**2 - 2*pixelsize**2*y_c*ycen + pixelsize**2*ycen**2))**2 + (sqrt(2)*dd*sin(beta + pi/4) - sqrt(2)*pixelsize*x_c*sin(gamma)*cos(beta + pi/4) + sqrt(2)*pixelsize*xcen*sin(gamma)*cos(beta + pi/4) + sqrt(2)*pixelsize*y_c*cos(gamma)*cos(beta + pi/4) - sqrt(2)*pixelsize*ycen*cos(gamma)*cos(beta + pi/4) - sqrt(dd**2 + pixelsize**2*x_c**2 - 2*pixelsize**2*x_c*xcen + pixelsize**2*xcen**2 + pixelsize**2*y_c**2 - 2*pixelsize**2*y_c*ycen + pixelsize**2*ycen**2))**2*cos(beta)/(sqrt(2)*dd*cos(beta + pi/4) + sqrt(2)*pixelsize*x_c*sin(gamma)*sin(beta + pi/4) - sqrt(2)*pixelsize*xcen*sin(gamma)*sin(beta + pi/4) - sqrt(2)*pixelsize*y_c*sin(beta + pi/4)*cos(gamma) + sqrt(2)*pixelsize*ycen*sin(beta + pi/4)*cos(gamma) + sqrt(dd**2 + pixelsize**2*x_c**2 - 2*pixelsize**2*x_c*xcen + pixelsize**2*xcen**2 + pixelsize**2*y_c**2 - 2*pixelsize**2*y_c*ycen + pixelsize**2*ycen**2))**2 - 2*(sqrt(2)*dd*sin(beta + pi/4) - sqrt(2)*pixelsize*x_c*sin(gamma)*cos(beta + pi/4) + sqrt(2)*pixelsize*xcen*sin(gamma)*cos(beta + pi/4) + sqrt(2)*pixelsize*y_c*cos(gamma)*cos(beta + pi/4) - sqrt(2)*pixelsize*ycen*cos(gamma)*cos(beta + pi/4) - sqrt(dd**2 + pixelsize**2*x_c**2 - 2*pixelsize**2*x_c*xcen + pixelsize**2*xcen**2 + pixelsize**2*y_c**2 - 2*pixelsize**2*y_c*ycen + pixelsize**2*ycen**2))*sin(beta)/(sqrt(2)*dd*cos(beta + pi/4) + sqrt(2)*pixelsize*x_c*sin(gamma)*sin(beta + pi/4) - sqrt(2)*pixelsize*xcen*sin(gamma)*sin(beta + pi/4) - sqrt(2)*pixelsize*y_c*sin(beta + pi/4)*cos(gamma) + sqrt(2)*pixelsize*ycen*sin(beta + pi/4)*cos(gamma) + sqrt(dd**2 + pixelsize**2*x_c**2 - 2*pixelsize**2*x_c*xcen + pixelsize**2*xcen**2 + pixelsize**2*y_c**2 - 2*pixelsize**2*y_c*ycen + pixelsize**2*ycen**2)) - cos(beta))), (-2*dd*pixelsize**2*(-x_c*cos(gamma) + xcen*cos(gamma) - y_c*sin(gamma) + ycen*sin(gamma))**2*cos(beta)*cos(gamma)/(sqrt(2)*dd*cos(beta + pi/4) + sqrt(2)*pixelsize*x_c*sin(gamma)*sin(beta + pi/4) - sqrt(2)*pixelsize*xcen*sin(gamma)*sin(beta + pi/4) - sqrt(2)*pixelsize*y_c*sin(beta + pi/4)*cos(gamma) + sqrt(2)*pixelsize*ycen*sin(beta + pi/4)*cos(gamma) + sqrt(dd**2 + pixelsize**2*x_c**2 - 2*pixelsize**2*x_c*xcen + pixelsize**2*xcen**2 + pixelsize**2*y_c**2 - 2*pixelsize**2*y_c*ycen + pixelsize**2*ycen**2))**2 - 2*dd*pixelsize*(-x_c*cos(gamma) + xcen*cos(gamma) - y_c*sin(gamma) + ycen*sin(gamma))*(sqrt(2)*dd*sin(beta + pi/4) - sqrt(2)*pixelsize*x_c*sin(gamma)*cos(beta + pi/4) + sqrt(2)*pixelsize*xcen*sin(gamma)*cos(beta + pi/4) + sqrt(2)*pixelsize*y_c*cos(gamma)*cos(beta + pi/4) - sqrt(2)*pixelsize*ycen*cos(gamma)*cos(beta + pi/4) - sqrt(dd**2 + pixelsize**2*x_c**2 - 2*pixelsize**2*x_c*xcen + pixelsize**2*xcen**2 + pixelsize**2*y_c**2 - 2*pixelsize**2*y_c*ycen + pixelsize**2*ycen**2))*sin(gamma)/(sqrt(2)*dd*cos(beta + pi/4) + sqrt(2)*pixelsize*x_c*sin(gamma)*sin(beta + pi/4) - sqrt(2)*pixelsize*xcen*sin(gamma)*sin(beta + pi/4) - sqrt(2)*pixelsize*y_c*sin(beta + pi/4)*cos(gamma) + sqrt(2)*pixelsize*ycen*sin(beta + pi/4)*cos(gamma) + sqrt(dd**2 + pixelsize**2*x_c**2 - 2*pixelsize**2*x_c*xcen + pixelsize**2*xcen**2 + pixelsize**2*y_c**2 - 2*pixelsize**2*y_c*ycen + pixelsize**2*ycen**2))**2 + 2*dd*pixelsize*(-x_c*cos(gamma) + xcen*cos(gamma) - y_c*sin(gamma) + ycen*sin(gamma))*sin(gamma)/(sqrt(2)*dd*cos(beta + pi/4) + sqrt(2)*pixelsize*x_c*sin(gamma)*sin(beta + pi/4) - sqrt(2)*pixelsize*xcen*sin(gamma)*sin(beta + pi/4) - sqrt(2)*pixelsize*y_c*sin(beta + pi/4)*cos(gamma) + sqrt(2)*pixelsize*ycen*sin(beta + pi/4)*cos(gamma) + sqrt(dd**2 + pixelsize**2*x_c**2 - 2*pixelsize**2*x_c*xcen + pixelsize**2*xcen**2 + pixelsize**2*y_c**2 - 2*pixelsize**2*y_c*ycen + pixelsize**2*ycen**2)) - dd*(sqrt(2)*dd*sin(beta + pi/4) - sqrt(2)*pixelsize*x_c*sin(gamma)*cos(beta + pi/4) + sqrt(2)*pixelsize*xcen*sin(gamma)*cos(beta + pi/4) + sqrt(2)*pixelsize*y_c*cos(gamma)*cos(beta + pi/4) - sqrt(2)*pixelsize*ycen*cos(gamma)*cos(beta + pi/4) - sqrt(dd**2 + pixelsize**2*x_c**2 - 2*pixelsize**2*x_c*xcen + pixelsize**2*xcen**2 + pixelsize**2*y_c**2 - 2*pixelsize**2*y_c*ycen + pixelsize**2*ycen**2))**2*sin(beta)*cos(gamma)/(sqrt(2)*dd*cos(beta + pi/4) + sqrt(2)*pixelsize*x_c*sin(gamma)*sin(beta + pi/4) - sqrt(2)*pixelsize*xcen*sin(gamma)*sin(beta + pi/4) - sqrt(2)*pixelsize*y_c*sin(beta + pi/4)*cos(gamma) + sqrt(2)*pixelsize*ycen*sin(beta + pi/4)*cos(gamma) + sqrt(dd**2 + pixelsize**2*x_c**2 - 2*pixelsize**2*x_c*xcen + pixelsize**2*xcen**2 + pixelsize**2*y_c**2 - 2*pixelsize**2*y_c*ycen + pixelsize**2*ycen**2))**2 - 2*dd*(sqrt(2)*dd*sin(beta + pi/4) - sqrt(2)*pixelsize*x_c*sin(gamma)*cos(beta + pi/4) + sqrt(2)*pixelsize*xcen*sin(gamma)*cos(beta + pi/4) + sqrt(2)*pixelsize*y_c*cos(gamma)*cos(beta + pi/4) - sqrt(2)*pixelsize*ycen*cos(gamma)*cos(beta + pi/4) - sqrt(dd**2 + pixelsize**2*x_c**2 - 2*pixelsize**2*x_c*xcen + pixelsize**2*xcen**2 + pixelsize**2*y_c**2 - 2*pixelsize**2*y_c*ycen + pixelsize**2*ycen**2))*cos(beta)*cos(gamma)/(sqrt(2)*dd*cos(beta + pi/4) + sqrt(2)*pixelsize*x_c*sin(gamma)*sin(beta + pi/4) - sqrt(2)*pixelsize*xcen*sin(gamma)*sin(beta + pi/4) - sqrt(2)*pixelsize*y_c*sin(beta + pi/4)*cos(gamma) + sqrt(2)*pixelsize*ycen*sin(beta + pi/4)*cos(gamma) + sqrt(dd**2 + pixelsize**2*x_c**2 - 2*pixelsize**2*x_c*xcen + pixelsize**2*xcen**2 + pixelsize**2*y_c**2 - 2*pixelsize**2*y_c*ycen + pixelsize**2*ycen**2)) + dd*sin(beta)*cos(gamma) - 2*pixelsize**3*ycen*(-x_c*cos(gamma) + xcen*cos(gamma) - y_c*sin(gamma) + ycen*sin(gamma))**2*sin(beta)/(sqrt(2)*dd*cos(beta + pi/4) + sqrt(2)*pixelsize*x_c*sin(gamma)*sin(beta + pi/4) - sqrt(2)*pixelsize*xcen*sin(gamma)*sin(beta + pi/4) - sqrt(2)*pixelsize*y_c*sin(beta + pi/4)*cos(gamma) + sqrt(2)*pixelsize*ycen*sin(beta + pi/4)*cos(gamma) + sqrt(dd**2 + pixelsize**2*x_c**2 - 2*pixelsize**2*x_c*xcen + pixelsize**2*xcen**2 + pixelsize**2*y_c**2 - 2*pixelsize**2*y_c*ycen + pixelsize**2*ycen**2))**2 + pixelsize*ycen*(sqrt(2)*dd*sin(beta + pi/4) - sqrt(2)*pixelsize*x_c*sin(gamma)*cos(beta + pi/4) + sqrt(2)*pixelsize*xcen*sin(gamma)*cos(beta + pi/4) + sqrt(2)*pixelsize*y_c*cos(gamma)*cos(beta + pi/4) - sqrt(2)*pixelsize*ycen*cos(gamma)*cos(beta + pi/4) - sqrt(dd**2 + pixelsize**2*x_c**2 - 2*pixelsize**2*x_c*xcen + pixelsize**2*xcen**2 + pixelsize**2*y_c**2 - 2*pixelsize**2*y_c*ycen + pixelsize**2*ycen**2))**2*cos(beta)/(sqrt(2)*dd*cos(beta + pi/4) + sqrt(2)*pixelsize*x_c*sin(gamma)*sin(beta + pi/4) - sqrt(2)*pixelsize*xcen*sin(gamma)*sin(beta + pi/4) - sqrt(2)*pixelsize*y_c*sin(beta + pi/4)*cos(gamma) + sqrt(2)*pixelsize*ycen*sin(beta + pi/4)*cos(gamma) + sqrt(dd**2 + pixelsize**2*x_c**2 - 2*pixelsize**2*x_c*xcen + pixelsize**2*xcen**2 + pixelsize**2*y_c**2 - 2*pixelsize**2*y_c*ycen + pixelsize**2*ycen**2))**2 - 2*pixelsize*ycen*(sqrt(2)*dd*sin(beta + pi/4) - sqrt(2)*pixelsize*x_c*sin(gamma)*cos(beta + pi/4) + sqrt(2)*pixelsize*xcen*sin(gamma)*cos(beta + pi/4) + sqrt(2)*pixelsize*y_c*cos(gamma)*cos(beta + pi/4) - sqrt(2)*pixelsize*ycen*cos(gamma)*cos(beta + pi/4) - sqrt(dd**2 + pixelsize**2*x_c**2 - 2*pixelsize**2*x_c*xcen + pixelsize**2*xcen**2 + pixelsize**2*y_c**2 - 2*pixelsize**2*y_c*ycen + pixelsize**2*ycen**2))*sin(beta)/(sqrt(2)*dd*cos(beta + pi/4) + sqrt(2)*pixelsize*x_c*sin(gamma)*sin(beta + pi/4) - sqrt(2)*pixelsize*xcen*sin(gamma)*sin(beta + pi/4) - sqrt(2)*pixelsize*y_c*sin(beta + pi/4)*cos(gamma) + sqrt(2)*pixelsize*ycen*sin(beta + pi/4)*cos(gamma) + sqrt(dd**2 + pixelsize**2*x_c**2 - 2*pixelsize**2*x_c*xcen + pixelsize**2*xcen**2 + pixelsize**2*y_c**2 - 2*pixelsize**2*y_c*ycen + pixelsize**2*ycen**2)) - pixelsize*ycen*cos(beta))/(pixelsize*(-2*pixelsize**2*(-x_c*cos(gamma) + xcen*cos(gamma) - y_c*sin(gamma) + ycen*sin(gamma))**2*sin(beta)/(sqrt(2)*dd*cos(beta + pi/4) + sqrt(2)*pixelsize*x_c*sin(gamma)*sin(beta + pi/4) - sqrt(2)*pixelsize*xcen*sin(gamma)*sin(beta + pi/4) - sqrt(2)*pixelsize*y_c*sin(beta + pi/4)*cos(gamma) + sqrt(2)*pixelsize*ycen*sin(beta + pi/4)*cos(gamma) + sqrt(dd**2 + pixelsize**2*x_c**2 - 2*pixelsize**2*x_c*xcen + pixelsize**2*xcen**2 + pixelsize**2*y_c**2 - 2*pixelsize**2*y_c*ycen + pixelsize**2*ycen**2))**2 + (sqrt(2)*dd*sin(beta + pi/4) - sqrt(2)*pixelsize*x_c*sin(gamma)*cos(beta + pi/4) + sqrt(2)*pixelsize*xcen*sin(gamma)*cos(beta + pi/4) + sqrt(2)*pixelsize*y_c*cos(gamma)*cos(beta + pi/4) - sqrt(2)*pixelsize*ycen*cos(gamma)*cos(beta + pi/4) - sqrt(dd**2 + pixelsize**2*x_c**2 - 2*pixelsize**2*x_c*xcen + pixelsize**2*xcen**2 + pixelsize**2*y_c**2 - 2*pixelsize**2*y_c*ycen + pixelsize**2*ycen**2))**2*cos(beta)/(sqrt(2)*dd*cos(beta + pi/4) + sqrt(2)*pixelsize*x_c*sin(gamma)*sin(beta + pi/4) - sqrt(2)*pixelsize*xcen*sin(gamma)*sin(beta + pi/4) - sqrt(2)*pixelsize*y_c*sin(beta + pi/4)*cos(gamma) + sqrt(2)*pixelsize*ycen*sin(beta + pi/4)*cos(gamma) + sqrt(dd**2 + pixelsize**2*x_c**2 - 2*pixelsize**2*x_c*xcen + pixelsize**2*xcen**2 + pixelsize**2*y_c**2 - 2*pixelsize**2*y_c*ycen + pixelsize**2*ycen**2))**2 - 2*(sqrt(2)*dd*sin(beta + pi/4) - sqrt(2)*pixelsize*x_c*sin(gamma)*cos(beta + pi/4) + sqrt(2)*pixelsize*xcen*sin(gamma)*cos(beta + pi/4) + sqrt(2)*pixelsize*y_c*cos(gamma)*cos(beta + pi/4) - sqrt(2)*pixelsize*ycen*cos(gamma)*cos(beta + pi/4) - sqrt(dd**2 + pixelsize**2*x_c**2 - 2*pixelsize**2*x_c*xcen + pixelsize**2*xcen**2 + pixelsize**2*y_c**2 - 2*pixelsize**2*y_c*ycen + pixelsize**2*ycen**2))*sin(beta)/(sqrt(2)*dd*cos(beta + pi/4) + sqrt(2)*pixelsize*x_c*sin(gamma)*sin(beta + pi/4) - sqrt(2)*pixelsize*xcen*sin(gamma)*sin(beta + pi/4) - sqrt(2)*pixelsize*y_c*sin(beta + pi/4)*cos(gamma) + sqrt(2)*pixelsize*ycen*sin(beta + pi/4)*cos(gamma) + sqrt(dd**2 + pixelsize**2*x_c**2 - 2*pixelsize**2*x_c*xcen + pixelsize**2*xcen**2 + pixelsize**2*y_c**2 - 2*pixelsize**2*y_c*ycen + pixelsize**2*ycen**2)) - cos(beta)))]
